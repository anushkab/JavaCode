package TEST;
/*
 *  Java Program to Implement Circular Singly Linked List
 */
 
import java.io.*;
 
/*  Class Node  */
class Node
{
    protected int data;
    protected Node link;
 
    /*  Constructor  */
    public Node()
    {
        link = null;
        data = 0;
    }    
    /*  Constructor  */
    public Node(int d,Node n)
    {
        data = d;
        link = n;
    }    
    /*  Function to set link to next Node  */
    public void setLink(Node n)
    {
        link = n;
    }    
    /*  Function to set data to current Node  */
    public void setData(int d)
    {
        data = d;
    }    
    /*  Function to get link to next node  */
    public Node getLink()
    {
        return link;
    }    
    /*  Function to get data from current Node  */
    public int getData()
    {
        return data;
    }
}
 
/* Class KILI */
class KILI
{
    protected Node start ;
    protected Node end ;
    public int size ;
 
    /* Constructor */
    public KILI()
    {
        start = null;
        end = null;
        size = 0;
    }
    /* Function to check if list is empty */
    public boolean isEmpty()
    {
        return start == null;
    }
    /* Function to get size of the list */
    public int getSize()
    {
        return size;
    }
    /* Function to insert element at the begining */
    public void insertAtStart(int val)
    {
        Node nptr = new Node(val,null);    
        nptr.setLink(start);
        if(start == null)
        {            
            start = nptr;
            nptr.setLink(start);
            end = start;            
        }
        else
        {
            end.setLink(nptr);
            start = nptr;        
        }
        size++ ;
    }
    public void delete(int pos)
    {          
    	if (size == 1 && pos == 1)
    {
        start = null;
        end = null;
        size = 0;
        return ;
    }        
    if (pos == 1) 
    {
        start = start.getLink();
        end.setLink(start);
        size--; 
        return ;
    }
    if (pos == size) 
    {
        Node s = start;
        Node t = start;
        while (s != end)
        {
            t = s;
            s = s.getLink();
        }
        end = t;
        end.setLink(start);
        size --;
        return;
    }
    Node ptr = start;
    pos = pos - 1 ;
    for (int i = 1; i < size - 1; i++) 
    {
        if (i == pos) 
        {
            Node tmp = ptr.getLink();
            tmp = tmp.getLink();
            ptr.setLink(tmp);
            break;
        }
        ptr = ptr.getLink();
    }
    size-- ;
}

    

}


 
/* Class CircularSinglyLinkedList */
public class CircularSinglyLinkedList
{    
	public static void main(String[] args) throws IOException 
	{
		// TODO Auto-generated method stub
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String s=reader.readLine();
		int T = Integer.parseInt(s);
		for (int l=0;l<T;l++)
		{String hii=reader.readLine();
				int N = Integer.parseInt(hii);
				KILI pewpew= new KILI(); 
     
					for(int h=N;h>0;h--)
    {
    	pewpew.insertAtStart(h);
    }
					int t=1;
					Node x=pewpew.start;

					while((x.link.link != x))
							{
						x.setLink((x.link).getLink());
						x = x.link;
					}

					while(pewpew.size>2)
					{	
						pewpew.delete(t);
					}
		System.out.println(pewpew.end.link.data);
		}
}
}
		
